import { Injectable, inject } from '@angular/core';
import { Camera } from '@capacitor/camera';
import { Geolocation } from '@capacitor/geolocation';
import { Capacitor } from '@capacitor/core';
import { AlertController } from '@ionic/angular';

export enum PermissionStatus {
  GRANTED = 'granted',
  DENIED = 'denied',
  PROMPT = 'prompt'
}

@Injectable({
  providedIn: 'root'
})
export class PermissionService {
  private alertController = inject(AlertController);

  constructor() {}

  /**
   * V√©rifie si on est sur une plateforme web ou native
   */
  private isWeb(): boolean {
    return Capacitor.getPlatform() === 'web';
  }

  /**
   * V√©rifier et demander permission cam√©ra
   * Sur le web : utilise l'API navigator.mediaDevices
   * Sur mobile : utilise Capacitor Camera
   */
  async checkCameraPermission(): Promise<boolean> {
    console.log('üé• checkCameraPermission - D√©but');
    console.log('üì± Plateforme:', Capacitor.getPlatform());

    try {
      if (this.isWeb()) {
        // ‚≠ê GESTION WEB SP√âCIFIQUE ‚≠ê
        return await this.checkCameraPermissionWeb();
      } else {
        // Gestion mobile avec Capacitor
        return await this.checkCameraPermissionNative();
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification permission cam√©ra:', error);
      return false;
    }
  }

  /**
   * V√©rifier permission cam√©ra sur le WEB
   * Utilise l'API navigator.mediaDevices.getUserMedia
   */
  private async checkCameraPermissionWeb(): Promise<boolean> {
    console.log('üåê V√©rification permission cam√©ra WEB');

    // V√©rifier si l'API est disponible
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      console.error('‚ùå API mediaDevices non disponible');
      await this.showPermissionAlert(
        'Cam√©ra non disponible',
        'Votre navigateur ne supporte pas l\'acc√®s √† la cam√©ra. Utilisez Chrome, Firefox ou Safari r√©cent.'
      );
      return false;
    }

    try {
      // V√©rifier d'abord l'√©tat de la permission (si l'API Permissions est disponible)
      if (navigator.permissions && navigator.permissions.query) {
        try {
          const permissionStatus = await navigator.permissions.query({ name: 'camera' as PermissionName });
          console.log('üìã √âtat permission cam√©ra:', permissionStatus.state);

          if (permissionStatus.state === 'denied') {
            console.log('‚ùå Permission cam√©ra refus√©e d√©finitivement');
            await this.showPermissionDeniedAlert('cam√©ra');
            return false;
          }

          if (permissionStatus.state === 'granted') {
            console.log('‚úÖ Permission cam√©ra d√©j√† accord√©e');
            return true;
          }
        } catch (e) {
          console.log('‚ö†Ô∏è API Permissions non disponible, tentative directe');
        }
      }

      // Demander l'acc√®s √† la cam√©ra
      console.log('üé• Demande d\'acc√®s √† la cam√©ra...');

      // Essayer d'acc√©der √† la cam√©ra (cela d√©clenche la demande de permission)
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'user', // Cam√©ra avant par d√©faut
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      });

      console.log('‚úÖ Permission cam√©ra accord√©e sur le web');

      // Arr√™ter imm√©diatement le flux (on voulait juste v√©rifier la permission)
      stream.getTracks().forEach(track => track.stop());
      console.log('üõë Flux cam√©ra arr√™t√©');

      return true;

    } catch (error: any) {
      console.error('‚ùå Erreur acc√®s cam√©ra web:', error);

      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {
        console.log('‚ùå Permission cam√©ra refus√©e par l\'utilisateur');
        await this.showPermissionDeniedAlert('cam√©ra');
        return false;
      } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {
        await this.showPermissionAlert(
          'Cam√©ra non trouv√©e',
          'Aucune cam√©ra n\'a √©t√© d√©tect√©e sur votre appareil.'
        );
        return false;
      } else if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {
        await this.showPermissionAlert(
          'Cam√©ra non accessible',
          'La cam√©ra est peut-√™tre utilis√©e par une autre application.'
        );
        return false;
      } else {
        await this.showPermissionAlert(
          'Erreur cam√©ra',
          'Une erreur est survenue lors de l\'acc√®s √† la cam√©ra.'
        );
        return false;
      }
    }
  }

  /**
   * V√©rifier permission cam√©ra sur MOBILE (iOS/Android)
   * Utilise Capacitor Camera API
   */
  private async checkCameraPermissionNative(): Promise<boolean> {
    console.log('üì± V√©rification permission cam√©ra NATIVE');

    try {
      // V√©rifier l'√©tat actuel
      const permission = await Camera.checkPermissions();
      console.log('üìã √âtat permission cam√©ra native:', permission);

      if (permission.camera === 'granted' && permission.photos === 'granted') {
        console.log('‚úÖ Permission cam√©ra d√©j√† accord√©e');
        return true;
      }

      if (permission.camera === 'denied' || permission.photos === 'denied') {
        console.log('‚ùå Permission cam√©ra refus√©e');
        await this.showPermissionDeniedAlert('cam√©ra');
        return false;
      }

      // Demander la permission
      console.log('üé• Demande permission cam√©ra native...');
      const request = await Camera.requestPermissions({ permissions: ['camera', 'photos'] });
      console.log('üìã R√©sultat demande permission:', request);

      if (request.camera === 'granted' && request.photos === 'granted') {
        console.log('‚úÖ Permission cam√©ra accord√©e');
        return true;
      } else {
        console.log('‚ùå Permission cam√©ra refus√©e apr√®s demande');
        await this.showPermissionDeniedAlert('cam√©ra');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erreur permission cam√©ra native:', error);
      return false;
    }
  }

  /**
   * V√©rifier et demander permission localisation
   * Fonctionne sur web et mobile
   */
  async checkLocationPermission(): Promise<boolean> {
    console.log('üìç checkLocationPermission - D√©but');
    console.log('üì± Plateforme:', Capacitor.getPlatform());

    try {
      if (this.isWeb()) {
        // Sur le web, la permission est demand√©e automatiquement par getCurrentPosition
        // On v√©rifie juste si l'API est disponible
        if (!navigator.geolocation) {
          console.error('‚ùå API Geolocation non disponible');
          await this.showPermissionAlert(
            'G√©olocalisation non disponible',
            'Votre navigateur ne supporte pas la g√©olocalisation.'
          );
          return false;
        }

        // V√©rifier l'√©tat de la permission si l'API est disponible
        if (navigator.permissions && navigator.permissions.query) {
          try {
            const permissionStatus = await navigator.permissions.query({ name: 'geolocation' as PermissionName });
            console.log('üìã √âtat permission localisation:', permissionStatus.state);

            if (permissionStatus.state === 'denied') {
              console.log('‚ùå Permission localisation refus√©e d√©finitivement');
              await this.showPermissionDeniedAlert('localisation');
              return false;
            }

            if (permissionStatus.state === 'granted') {
              console.log('‚úÖ Permission localisation d√©j√† accord√©e');
              return true;
            }
          } catch (e) {
            console.log('‚ö†Ô∏è API Permissions non disponible pour geolocation');
          }
        }

        // Sur le web, on retourne true et la permission sera demand√©e lors de getCurrentPosition
        console.log('‚úÖ Permission localisation sera demand√©e lors de l\'utilisation');
        return true;
      } else {
        // Gestion mobile native
        return await this.checkLocationPermissionNative();
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification permission localisation:', error);
      return false;
    }
  }

  /**
   * V√©rifier permission localisation sur MOBILE
   */
  private async checkLocationPermissionNative(): Promise<boolean> {
    console.log('üì± V√©rification permission localisation NATIVE');

    try {
      // V√©rifier l'√©tat actuel
      const permission = await Geolocation.checkPermissions();
      console.log('üìã √âtat permission localisation native:', permission);

      if (permission.location === 'granted') {
        console.log('‚úÖ Permission localisation d√©j√† accord√©e');
        return true;
      }

      if (permission.location === 'denied') {
        console.log('‚ùå Permission localisation refus√©e');
        await this.showPermissionDeniedAlert('localisation');
        return false;
      }

      // Demander la permission
      console.log('üìç Demande permission localisation native...');
      const request = await Geolocation.requestPermissions();
      console.log('üìã R√©sultat demande permission:', request);

      if (request.location === 'granted') {
        console.log('‚úÖ Permission localisation accord√©e');
        return true;
      } else {
        console.log('‚ùå Permission localisation refus√©e apr√®s demande');
        await this.showPermissionDeniedAlert('localisation');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erreur permission localisation native:', error);
      return false;
    }
  }

  /**
   * Afficher l'alerte pour permission refus√©e
   */
  private async showPermissionDeniedAlert(permissionType: string): Promise<void> {
    console.log('‚ö†Ô∏è Affichage alerte permission refus√©e:', permissionType);

    let message = '';
    if (this.isWeb()) {
      message = `L'acc√®s √† la ${permissionType} a √©t√© refus√©. Pour l'autoriser :\n\n` +
                `1. Cliquez sur l'ic√¥ne üîí ou ‚ÑπÔ∏è dans la barre d'adresse\n` +
                `2. Autorisez l'acc√®s √† la ${permissionType}\n` +
                `3. Rechargez la page`;
    } else {
      message = `L'acc√®s √† la ${permissionType} est n√©cessaire. Veuillez activer la permission dans les param√®tres de votre appareil.`;
    }

    const alert = await this.alertController.create({
      header: 'Permission refus√©e',
      message: message,
      buttons: [
        {
          text: 'OK',
          role: 'cancel'
        }
      ]
    });

    await alert.present();
  }

  /**
   * Afficher une alerte d'information personnalis√©e
   */
  private async showPermissionAlert(header: string, message: string): Promise<void> {
    const alert = await this.alertController.create({
      header,
      message,
      buttons: ['OK']
    });

    await alert.present();
  }

  /**
   * Obtenir des informations sur la plateforme
   */
  getPlatformInfo(): string {
    const platform = Capacitor.getPlatform();
    const isNative = Capacitor.isNativePlatform();
    return `Plateforme: ${platform}, Native: ${isNative}`;
  }
}
